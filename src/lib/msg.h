/**
 * @file msg.h
 * @brief Header file for the message layer / msg.c
 * 
 * @date 2024-07
 * 
 * @note DO NOT EDIT THIS FILE
 */

#ifndef MSG_H
#define MSG_H

#include <stdint.h>

// Return Codes
#define MSG_OK              (0) // Successful result
#define MSG_ERROR           (1) // General error
#define MSG_TIMEOUT         (2) // Timeout while receiving data

// Helper macro for defining buffers. This is larger than necessary.
#define MSG_BUFFER_SIZE     (1024)

#define MSG_RECV_TIMEOUT_MS (1000) // in 

#define MSG_PIPE_NAME "\\\\.\\pipe\\MessagePipe"

// Function to send a <msg> of length <len> to the "server"
int     msg_send(uint8_t* msg, uint8_t len);

// Function to recieve a <msg> from the "server".
//  On Success (0, MSG_OK), the number of bytes recieved is written to <len>
int     msg_recv(uint8_t* msg, uint8_t* len);

// Function to recieve a <msg> from the "server", 
//  Returns MSG_TIMEOUT if <timeout_ms> elapses before a message is recieved
int     msg_recv_to(uint8_t* msg, uint8_t* len, uint32_t timeout_ms);

// Functions for opening/closing the connection. You don't need to use these directly.
int     msg_open();
int     msg_connect(uint8_t task_num);
int     msg_close();

#endif // MSG_H
